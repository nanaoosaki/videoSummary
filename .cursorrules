# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state of `Multi-Agent Scratchpad` section in the `.cursorrules` file. Your goal is to complete the user's (or business's) final requirements. The specific instructions are as follows:

## Role Descriptions

1. Planner

    * Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. When doing planning, always use high-intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Don't rely on your own capabilities to do the planning.
    * Actions: Invoke the Planner by calling `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt}`. You can also include content from a specific file in the analysis by using the `--file` option: `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file {path/to/file}`. It will print out a plan on how to revise the `.cursorrules` file. You then need to actually do the changes to the file. And then reread the file to see what's the next step.

2) Executor

    * Responsibilities: Execute specific tasks instructed by the Planner, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the Planner at the right time, e.g. after completion some milestone or after you've hit a blocker.
    * Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to the `Multi-Agent Scratchpad` section in the `.cursorrules` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections. And then change to the Planner role.

## Document Conventions

* The `Multi-Agent Scratchpad` section in the `.cursorrules` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
* Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
* "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
* "Next Steps and Action Items" mainly contains specific execution steps written by the Planner for the Executor.

## Workflow Guidelines

* After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
* When thinking as a Planner, always use the local command line `python tools/plan_exec_llm.py --prompt {any prompt}` to call the o1 model for deep analysis, recording results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
* When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
* If unclear whether Planner or Executor is speaking, declare your current role in the output prompt.
* Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `Multi-Agent Scratchpad` section.

Please note:

* Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the Planner for confirmation. Then the Planner needs to do some cross-checking.
* Avoid rewriting the entire document unless necessary;
* Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
* When new external information is needed, you can use command line tools (like search_engine.py, llm_api.py), but document the purpose and results of such requests;
* Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
* During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use `gpt-4o` as the model name for OpenAI. It is the latest GPT model and has vision capabilities as well. `o1` is the most advanced and expensive model from OpenAI. Use it when you need to do reasoning, planning, or get blocked.
- Use `claude-3-5-sonnet-20241022` as the model name for Claude. It is the latest Claude model and has vision capabilities as well.

- Package Installation in Virtual Environment:
  - When installing Google's generativeai package:
    1. First activate the virtual environment: `.\venv\Scripts\activate`
    2. Use pip3 specifically: `.\venv\Scripts\pip3.exe install google-generativeai`
    3. Verify installation with: `.\venv\Scripts\python.exe -c "import google.generativeai; print('Successfully imported google.generativeai')"`
    4. If installation fails, try installing dependencies first (google-api-core, google-api-python-client, etc.)
    5. Make sure to set PYTHONPATH to include project root when running scripts: `$env:PYTHONPATH = "."`
    6. Use Case in Resume Tailor:
       - Part of multi-LLM strategy for content enhancement
       - Used alongside OpenAI and Anthropic models
       - Particularly good for maintaining JSON structure in resume content
       - Handles format-aware content optimization
       - Key component in `tools/llm_api.py` for the resume tailoring pipeline

- PowerShell Command Execution:
  - Use semicolon `;` instead of `&&` for command chaining
  - For directory creation, use `mkdir` without the `-p` flag as it's not supported
  - When running Python scripts, prefer using relative paths with `.\` prefix
  - For multiple commands, separate them with semicolons or write them on separate lines
  - Use `$env:PATH` instead of `$PATH` for environment variables

- Google Drive Sync Workflow:
  - Direct file copying using PowerShell's `Copy-Item` may not work reliably with Google Drive due to sync timing issues
  - Instead, use dedicated sync scripts (like `sync_to_drive.py`) that handle file operations and wait for completion
  - The sync script should:
    1. Verify the destination path exists and is accessible
    2. Handle file naming (removing special characters, making names readable)
    3. Provide clear feedback about which files were copied
    4. Wait for operations to complete before exiting
  - When syncing to Google Drive:
    - Use absolute paths to avoid any path resolution issues
    - Handle special characters in filenames
    - Consider file locking issues that may occur during sync
    - Provide progress feedback for large transfers

- Virtual Environment in PowerShell:
  - Always verify venv activation state before running pip commands
  - Use `.\venv\Scripts\activate` for activation (not `source`)
  - After activation, check with `pip -V` to ensure correct Python path
  - If venv shows wrong path:
    1. Delete the existing venv directory: `Remove-Item -Recurse -Force venv`
    2. Create new venv: `python -m venv venv`
    3. Activate: `.\venv\Scripts\activate`
  - For pip installations:
    - Use `.\venv\Scripts\python -m pip install package_name` when venv is not activated
    - Use `pip install package_name` when venv is properly activated
  - For script execution:
    - Use `.\venv\Scripts\python script.py` when venv is not activated
    - Use `python script.py` when venv is properly activated
  - Always check error messages for path-related issues, especially "Fatal error in launcher" which often indicates venv path problems

- YouTube Video Processing Workflow:
  1. Input/Output Structure:
     - Input: YouTube video URL
     - Output:
       - Directory named after sanitized video title
       - Files in each directory:
         - `video_info.md`: Main markdown file with YAML frontmatter for Obsidian
         - `transcript.txt`: Human-readable transcript
         - `transcript.json`: Raw transcript data
         - `key_points.txt`: Human-readable key points
         - `key_points.json`: Structured key points data

  2. Text Processing Best Practices:
     - Clean speech patterns before analysis:
       - Remove filler words (um, uh, like, etc.)
       - Handle repetitive words and stuttering
       - Add proper sentence boundaries
     - Use weighted keyword system for better categorization
     - Score sentences based on multiple factors:
       - Keyword matches with weights
       - Sentence completeness (verb presence)
       - Length and complexity
       - Preference for general statements over examples

  3. File Naming and Organization:
     - Use video title instead of ID for directory names
     - Sanitize filenames:
       - Replace special characters with underscores
       - Convert to lowercase
       - Handle spaces and dashes consistently
     - Maintain consistent file structure across videos

  4. YAML Frontmatter for Obsidian:
     - Required fields:
       - title (properly escaped)
       - category
       - type
       - source
       - videoId
       - createdDate
       - tags
       - status
     - Handle special characters in titles (e.g., replace ":" with "-")
     - Use consistent date format (YYYY/MM/DD)

  5. Key Points Extraction:
     - Categories:
       - Main Insights
       - Success Principles
       - Practical Tips
       - Challenges & Solutions
       - Key Takeaways
     - Use weighted keywords for better categorization
     - Clean and validate sentences before scoring
     - Limit to top 3 most relevant points per category

  6. Google Drive Integration:
     - Use sanitized titles for final filenames
     - Maintain consistent file structure
     - Handle file overwrites with -Force parameter
     - Verify file accessibility before copying

  7. Error Handling:
     - Gracefully handle missing transcripts
     - Provide fallback for failed video title fetching
     - Create missing directories as needed
     - Handle UTF-8 encoding for international content

  8. Performance Optimizations:
     - Process existing directories in batch
     - Reuse video info files when available
     - Minimize API calls to YouTube
     - Efficient text processing with regex

## Current Status / Progress Tracking

Project has been completed successfully with improved functionality:
1. Better directory naming using actual video titles
2. Enhanced key points extraction with meaningful categories
3. Improved text cleaning and sentence selection
4. Proper YAML frontmatter for Obsidian compatibility
5. Efficient file syncing to Google Drive

## Executor's Feedback or Assistance Requests

The workflow is now working smoothly with:
- Proper handling of video titles and directory names
- Better key points extraction and categorization
- Consistent file structure and organization
- Reliable Google Drive integration

No further assistance needed at this time.